clonar el projecto por primera vez:
-----------------------------------
git clone <url>

cd ratsoft

composer install (esto lo tenes que hacer para que meta todas las dependencias de proyecto, sino no funca)

Si estuviste laburando en tu PC y queres subir los cambios:
-----------------------------------------------------------
git add . (asi con el puntito al final)
git commit -m "un texto descriptivo que diga o que estuviste haciendo"
git push

Si queres meter los cambios en un branch especifivo antes de lo anterior cambias al branch deseado:
---------------------------------------------------------------------------------------------------
git checkout <branch>
git add . (asi con el puntito al final)
git commit -m "un texto descriptivo que diga o que estuviste haciendo"
git push

Si queres meter los cambios en un brach que no existe y tenes que crearlo:
--------------------------------------------------------------------------
git checkout -b <nuevobranch>
git add . (asi con el puntito al final)
git commit -m "un texto descriptivo que diga o que estuviste haciendo"
git push --set-upstream origin nuevobranch

Si quieren ver todos los branchs que hay (y en que branch estan parados):
-----------------------------------------
git branch

Si quieren borrar un branch:
----------------------------
git checkout <un branch distinto al que van a borrar>
git branch -d <branch que van a borrar>

Si quieren bajarse los cambios que se estuvieron metiendo:
----------------------------------------------------------
git remote update (esto para asegurar que estan visibles las diferencias entre lo que hay local y remoto)
git status (te va a tirar info)
git pull origin <branch> (te va a bajar los cambios)

Puede darse el caso que lo anterior no te aplique los cambios porque vos tenes cambios en el mismo file y GIT interpreta que tus cambios son mas importantes):

Para resolver eso:
------------------
git remote update (esto para asegurar que estan visibles las diferencias entre lo que hay local y remoto)
git status (te va a tirar info)
git reset --hard origin/<branch>
git pull origin <branch>

(ojo porque se caga en tus cambios y te pisa lo que hayas hecho si estabas trabajando en un archivo de los que va a actualizar)

---------------------------------------------------------------------------------
Si tira el error: 

Please, commit your changes or stash them before you can merge.

Lo pudimos resolver con:

You can't merge with local modifications. Git protects you from losing potentially important changes.

You have three options.

1. Commit the change using

    git commit -m "My message"
2. Stash it.

Stashing acts as a stack, where you can push changes, and you pop them in reverse order.

To stash type:

git stash
Do the merge, and then pull the stash:

git stash pop
3. Discard the local changes

using git reset --hard. or git checkout -t -f remote/branch

3. a) Discard local changes for a specific file

using git checkout filename

Link: https://stackoverflow.com/questions/15745045/how-do-i-resolve-git-saying-commit-your-changes-or-stash-them-before-you-can-me

--------------------------------------------------------------------------

Resolver conflicto (merge)

1.Open Git Bash
2.Navigate into the local Git repository that has the merge conflict.
 "cd REPOSITORY-NAME"
3.Generate a list of the files affected by the merge conflict. In this example, the file styleguide.md has a merge conflict.
git status
# On branch branch-b
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Unmerged paths:
#   (use "git add ..." to mark resolution)
#
# both modified:      styleguide.md
#
no changes added to commit (use "git add" and/or "git commit -a")
4.Open your favorite text editor, such as Atom, and navigate to the file that has merge conflicts.
5.To see the beginning of the merge conflict in your file, search the file for the conflict marker <<<<<<<. 
When you open the file in your text editor, you'll see the changes from the HEAD or base branch after the line <<<<<<< HEAD. 
Next, you'll see =======, which divides your changes from the changes in the other branch, followed by >>>>>>> BRANCH-NAME. 
In this example, one person wrote "open an issue" in the base or HEAD branch and another person wrote "ask your question in IRC" in the compare branch or branch-a.

If you have questions, please
<<<<<<< HEAD
open an issue
=======
ask your question in IRC.
>>>>>>> branch-a

6.Decide if you want to keep only your branch's changes, keep only the other branch's changes, or make a brand new change, which may incorporate changes from both branches.
Delete the conflict markers <<<<<<<, =======, >>>>>>> and make the changes you want in the final merge
7.Add or stage your changes.
"git add ."
8.Commit your changes with a comment
"git commit -m "Resolved merge conflict by incorporating both suggestions."


link: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/





